<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GAVProjectFramework</name>
    </assembly>
    <members>
        <member name="T:Gav.Graphics.MapLayerLodHandler">
            <summary>
            Abstract class enabling the posibility to fade in and out layers depending on map position and zoom.
            </summary>
        </member>
        <member name="M:Gav.Graphics.MapLayerLodHandler.GetLayerAlpha(System.Int32)">
            <summary>
            Calculates the alpha of the map layer with the passed index. The alpha depends on the position and zom.
            </summary>
            <param name="id">Layer id</param>
            <returns>The alpha value (0-255).</returns>
        </member>
        <member name="M:Gav.Graphics.MapLayer.ParseIndex(System.Int32)">
            <summary>
            Maps the passed index from the set StringIndexMapper. If the IndexMapper property is null this method will return the input index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Gav.Graphics.MapLayer.Invalidate">
            <summary>
            Invalidates the MapLayer.
            </summary>
        </member>
        <member name="P:Gav.Graphics.MapLayer.IndexMapper">
            <summary>
            Gets or sets the StringIndexMapper. If the property is set, the MapLayer will use this to map indexes in the ParseIndex method.
            </summary>
        </member>
        <member name="P:Gav.Graphics.MapLayer.Translation">
            <summary>
            Gets or sets the translation of the layer.
            </summary>
        </member>
        <member name="P:Gav.Graphics.MapLayer.IndexVisibilityHandler">
            <summary>
            Gets or sets the IndexVisibilityHandler used for visibility testing. If null, all the glyphs are visible. 
            </summary>
        </member>
        <member name="P:Gav.Graphics.MapLayer.Alpha">
            <summary>
            Sets the alpha value of the layer. Values from 0 to 255 are valid, where 0 is not visible and 255 is opaque.
            </summary>
        </member>
        <member name="P:Gav.Graphics.MapLayer.MapData">
            <summary>
            Gets or sets the MapData object.
            </summary>
        </member>
        <member name="T:Gav.Graphics.DataCubeViewer">
            <summary>
            DataCubeViewer shows the input data in a DataGridView. 
            </summary>
        </member>
        <member name="M:Gav.Graphics.VizComponent.AddDragAndDropSource(System.Object)">
            <summary>
            Add a new drag and drop source.
            </summary>
            <param name="source">Source</param>
        </member>
        <member name="M:Gav.Graphics.VizComponent.GetDragAndDropSources">
            <summary>
            Get the drag and drop sources.
            </summary>
            <returns>List of drag and drop sources</returns>
        </member>
        <member name="M:Gav.Graphics.VizComponent.IsAllowedDragAndDropSource(System.Object)">
            <summary>
            Checks if the passed source is a drag and drop source for this component. 
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Gav.Graphics.VizComponent.AddSubComponent(Gav.Graphics.VizSubComponent)">
            <summary>
            Add a VizSubComponent to be rendered on the same surface.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:Gav.Graphics.VizComponent.Invalidate">
            <summary>
            Invalidate the component. This will update invalidate-dependent changes and render the component.
            </summary>
        </member>
        <member name="E:Gav.Graphics.VizComponent.VizComponentMouseDown">
            <summary>
            Occurs when a mouse button is pressed down over the component.
            </summary>
        </member>
        <member name="E:Gav.Graphics.VizComponent.VizComponentMouseUp">
            <summary>
            Occurs when a mouse button is released over the component.
            </summary>
        </member>
        <member name="E:Gav.Graphics.VizComponent.VizComponentMouseMove">
            <summary>
            Occurs when the mouse is moves over the component.
            </summary>
        </member>
        <member name="E:Gav.Graphics.VizComponent.Drop">
            <summary>
            Occurs when a valid drag and drop item id dropped over the component.
            </summary>
        </member>
        <member name="E:Gav.Graphics.VizComponent.DragOver">
            <summary>
            Occurs when a valid drag and drop item is dragged over the component.
            </summary>
        </member>
        <member name="E:Gav.Graphics.VizComponent.DragLeave">
            <summary>
            Occurs when a valid drag and drop item leaves the component.
            </summary>
        </member>
        <member name="P:Gav.Graphics.VizComponent.Name">
            <summary>
            Gets or sets the name of the VizComponent.
            </summary>
        </member>
        <member name="P:Gav.Graphics.VizComponent.BackgroundColor">
            <summary>
            Get or set the clear color of the component.
            </summary>
        </member>
        <member name="P:Gav.Graphics.VizComponent.Enabled">
            <summary>
            Set or get if the component should be rendered or not. 
            </summary>
        </member>
        <member name="M:Gav.Graphics.DataCubeViewer.SetHeaders(System.Collections.Generic.List{System.String})">
            <summary>
            Sets the column headers. 
            </summary>
            <param name="headers"></param>
        </member>
        <member name="P:Gav.Graphics.DataCubeViewer.Input">
            <summary>
            Gets or sets the data to show.
            </summary>
        </member>
        <member name="T:Gav.Data.IDataCubeProvider`1">
            <summary>
            Interface for the IDataCubeProvider
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Gav.Data.CubeSubsetFilter">
            <summary>
            The CubeSubsetFilter extracts a subset of cube.
            </summary>
        </member>
        <member name="M:Gav.Data.CubeSubsetFilter.ProcessData">
            <summary>
            Performs the filtering. This is done automatically if the GetData() method is called. 
            </summary>
        </member>
        <member name="P:Gav.Data.CubeSubsetFilter.StartX">
            <summary>
            Sets or gets where to start on the x-axis.
            </summary>
        </member>
        <member name="P:Gav.Data.CubeSubsetFilter.StartY">
            <summary>
            Sets or gets where to start on the y-axis.
            </summary>
        </member>
        <member name="P:Gav.Data.CubeSubsetFilter.StartZ">
            <summary>
            Sets or gets where to start on the z-axis.
            </summary>
        </member>
        <member name="P:Gav.Data.CubeSubsetFilter.EndX">
            <summary>
            Sets or gets where to end on the x-axis.
            </summary>
        </member>
        <member name="P:Gav.Data.CubeSubsetFilter.EndY">
            <summary>
            Sets or gets where to end on the y-axis.
            </summary>
        </member>
        <member name="P:Gav.Data.CubeSubsetFilter.EndZ">
            <summary>
            Sets or gets where to end on the z-axis.
            </summary>
        </member>
        <member name="T:Gav.Data.Axis">
            <summary>
            Axis Enum
            </summary>
        </member>
        <member name="T:Gav.Graphics.GlyphPositioner">
            <summary>
            This class handles position of items related to an index in the assigned MapData object. 
            </summary>
        </member>
        <member name="M:Gav.Graphics.GlyphPositioner.GetPosition(System.Int32)">
            <summary>
            Returns the calculated position.
            </summary>
            <param name="index">Area index</param>
            <returns>Calculated poistion</returns>
        </member>
        <member name="P:Gav.Graphics.GlyphPositioner.MapData">
            <summary>
            Gets or sets the MapData object. 
            </summary>
        </member>
        <member name="T:Gav.Data.ShapeFileReader">
            <summary>
            This class creates a MapData object from a shapefile (.shp).
            </summary>
        </member>
        <member name="M:Gav.Data.ShapeFileReader.Read(System.String,System.String,System.String)">
            <summary>
            Creates a MapData object from the provided files. 
            </summary>
            <param name="shpFile">Shapefile</param>
            <param name="dbfFile">DBF file</param>
            <param name="shxFile">SHX file</param>
            <returns></returns>
        </member>
        <member name="T:Gav.Graphics.ScatterPlot2D">
            <summary>
            A scatter plot component providing two spatial dimensions.
            </summary>
        </member>
        <member name="T:Gav.Graphics.AbstractScatterPlot">
            <summary>
            The AbstractScatterPlot is the base class for the ScatterPlot2D and ScatterPlot3D components.
            </summary>
        </member>
        <member name="M:Gav.Graphics.AbstractScatterPlot.SetSelectedGlyphs(System.Collections.Generic.List{System.Int32},System.Boolean)">
            <summary>
            Sets the indexes of the glyphs that the ScatterPlot should color with the SelectedGlyphColor. If add is true the list with indexes will be added to the current list of selected glyph indexes.
            </summary>
            <param name="selectedGlyphIndexes">List of indexes to be selected.</param>
            <param name="add">True if the list should be addes, false if not.</param>
        </member>
        <member name="E:Gav.Graphics.AbstractScatterPlot.Picked">
            <summary>
            Occurs when the left mouse button is clicked inside the components render area. A list containing the picked glyphs indexes is stored in the IndexesPickedEventArgs. (In ScatterPlot3D, the list of picked indexes is sorted with the closest glyph first)
            </summary>
        </member>
        <member name="P:Gav.Graphics.AbstractScatterPlot.SelectedGlyphColor">
            <summary>
            Gets or sets the color of selected glyphs.
            </summary>
        </member>
        <member name="P:Gav.Graphics.AbstractScatterPlot.AxisXText">
            <summary>
            Gets or sets text assigned to the X-axis. (In ScatterPlot3D this property needs Invalidate() to apply changes)
            </summary>
        </member>
        <member name="P:Gav.Graphics.AbstractScatterPlot.AxisTextFont">
            <summary>
            Sets or gets the font used for axis text.
            </summary>
        </member>
        <member name="P:Gav.Graphics.AbstractScatterPlot.AxisYText">
            <summary>
            Gets or sets text assigned to the Y-axis. (In ScatterPlot3D this property needs Invalidate() to apply changes)
            </summary>
        </member>
        <member name="P:Gav.Graphics.AbstractScatterPlot.AxisZText">
            <summary>
            Gets or sets text assigned to the Z-axis. (In ScatterPlot3D this property needs Invalidate() to apply changes)
            </summary>
        </member>
        <member name="P:Gav.Graphics.AbstractScatterPlot.AxisTextColor">
            <summary>
            Gets or sets the color of the axis-assigned text.
            </summary>
        </member>
        <member name="P:Gav.Graphics.AbstractScatterPlot.AxisColor">
            <summary>
            Sets color of the axes.
            </summary>
        </member>
        <member name="P:Gav.Graphics.AbstractScatterPlot.AxisColorX">
            <summary>
            Gets or sets the x-axis color.
            </summary>
        </member>
        <member name="P:Gav.Graphics.AbstractScatterPlot.AxisColorY">
            <summary>
            Gets or sets the y-axis color.
            </summary>
        </member>
        <member name="P:Gav.Graphics.AbstractScatterPlot.AxisColorZ">
            <summary>
            Gets or sets the z-axis color. (This property has no effect in ScatterPlot2D)
            </summary>
        </member>
        <member name="P:Gav.Graphics.AbstractScatterPlot.GlyphSize">
            <summary>
            Gets or sets the glyph standard size. Value can be between 0 and 1, where 1 is the size of the plot. If the AxisIndexSize is -1 (not assigned) this is the size of all glyphs. (Currently this property has no effect in ScatterPlot2D)
            </summary>
        </member>
        <member name="P:Gav.Graphics.AbstractScatterPlot.GlyphMaxSize">
            <summary>
            Gets or sets the maximum size of a glyph. This value is only used if the AxisIndexSize is in use (not equal to -1). If used, the size of the glyphs are mapped between GlyphMinSize and GlyphMaxSize. (Currently this property has no effect in ScatterPlot2D)        
            </summary>
        </member>
        <member name="P:Gav.Graphics.AbstractScatterPlot.GlyphMinSize">
            <summary>
            Gets or sets the minimum size of a glyph. This value is only used if the AxisIndexSize is in use (not equal to -1). If used, the size of the glyphs are mapped between GlyphMinSize and GlyphMaxSize. (Currently this property has no effect in ScatterPlot2D)
            </summary>
        </member>
        <member name="P:Gav.Graphics.AbstractScatterPlot.ColorMap">
            <summary>
            Gets or sets the IColorMap used for glyph coloring.
            </summary>
        </member>
        <member name="P:Gav.Graphics.AbstractScatterPlot.Input">
            <summary>
            Gets or sets the data input.
            </summary>
        </member>
        <member name="P:Gav.Graphics.AbstractScatterPlot.AxisIndexX">
            <summary>
            Gets or sets which input column the x-axis should map.
            </summary>
        </member>
        <member name="P:Gav.Graphics.AbstractScatterPlot.AxisIndexY">
            <summary>
            Gets or sets which input column the y-axis should map.
            </summary>
        </member>
        <member name="P:Gav.Graphics.AbstractScatterPlot.AxisIndexZ">
            <summary>
            Gets or sets which input column the z-axis should map (This property has no effect in ScatterPlot2D).
            </summary>
        </member>
        <member name="P:Gav.Graphics.AbstractScatterPlot.AxisIndexSize">
            <summary>
            Gets or sets which input column the glyph size should map.
            </summary>
        </member>
        <member name="P:Gav.Graphics.AbstractScatterPlot.IndexVisibilityHandler">
            <summary>
            Gets or sets the IndexVisibilityHandler used for visibility testing. If null, all the glyphs are visible. 
            </summary>
        </member>
        <member name="F:Gav.Graphics.ScatterPlot2D._glyphTexture">
            <summary>
            Texture containing the glyph used in the plot.
            </summary>
        </member>
        <member name="F:Gav.Graphics.ScatterPlot2D._sprite">
            <summary>
            Sprite object used to render glyphs.
            </summary>
        </member>
        <member name="F:Gav.Graphics.ScatterPlot2D._d3dFont">
            <summary>
            The DirectX Font object used to render the text.
            </summary>
        </member>
        <member name="F:Gav.Graphics.ScatterPlot2D._d3dLine">
            <summary>
            The DirectX line object used to render lines in the plot. 
            </summary>
        </member>
        <member name="F:Gav.Graphics.ScatterPlot2D._paddingTop">
            <summary>
            The distance in pixels from the render surface top to the plot.
            </summary>
        </member>
        <member name="F:Gav.Graphics.ScatterPlot2D._paddingBottom">
            <summary>
            The distance in pixels from the render surface bottom to the plot.
            </summary>
        </member>
        <member name="F:Gav.Graphics.ScatterPlot2D._paddingRight">
            <summary>
            The distance in pixels from the render surface right border to the plot.
            </summary>
        </member>
        <member name="F:Gav.Graphics.ScatterPlot2D._paddingLeft">
            <summary>
            The distance in pixels from the render surface left border to the plot.
            </summary>
        </member>
        <member name="F:Gav.Graphics.ScatterPlot2D._glyphTextureSize">
            <summary>
            The size of the texture containing the glyph.
            </summary>
        </member>
        <member name="M:Gav.Graphics.ScatterPlot2D.IsPointIntersectingXAxis(System.Drawing.Point)">
            <summary>
            Checks if the point intersects the x-axis.
            </summary>
            <param name="p">Location in render target coordinates.</param>
            <returns>True if the point intersects the axis, else false.</returns>
        </member>
        <member name="M:Gav.Graphics.ScatterPlot2D.IsPointIntersectingYAxis(System.Drawing.Point)">
            <summary>
            Checks if the point intersects the y-axis.
            </summary>
            <param name="p">Location in render target coordinates.</param>
            <returns>True if the point intersects the axis, else false.</returns>
        </member>
        <member name="P:Gav.Graphics.ScatterPlot2D.PaddingTop">
            <summary>
            Sets or gets the padding from the top edge of the render area.
            </summary>
        </member>
        <member name="P:Gav.Graphics.ScatterPlot2D.PaddingBottom">
            <summary>
            Sets or gets the padding from the bottom edge of the render area.
            </summary>
        </member>
        <member name="P:Gav.Graphics.ScatterPlot2D.PaddingRight">
            <summary>
            Sets or gets the padding from the right edge of the render area.
            </summary>
        </member>
        <member name="P:Gav.Graphics.ScatterPlot2D.PaddingLeft">
            <summary>
            Sets or gets the padding from the left edge of the render area.
            </summary>
        </member>
        <member name="P:Gav.Graphics.ScatterPlot2D.NumberOfGridLines">
            <summary>
            Sets or gets number of lines in the grid.
            </summary>
        </member>
        <member name="P:Gav.Graphics.ScatterPlot2D.GlyphTransparency">
            <summary>
            Sets or gets the glyph transparency. (Values from 0 to 255 are valid)
            </summary>
        </member>
        <member name="P:Gav.Graphics.ScatterPlot2D.ShowGrid">
            <summary>
            Sets or gets if to show the background grid.
            </summary>
        </member>
        <member name="P:Gav.Graphics.ScatterPlot2D.PickSensitivity">
            <summary>
            Get or sets the pick sensitivity in pixels;
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Gav.Graphics.ParallelCoordinatesPlot" -->
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.SetAxisColors(System.Collections.Generic.List{System.Drawing.Color})">
            <summary>
            Sets the colors for the axes.
            </summary>
            <param name="colors">List of colors.</param>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.InternalInit(Microsoft.DirectX.Direct3D.Device)">
            <summary>
            Init
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.InternalInvalidate">
            <summary>
            Invalidates the component
            </summary>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.OnFilterChanged">
            <summary>
            Filter changing event
            </summary>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.OnLineHeaderClicked">
            <summary>
            Header clicking event
            </summary>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.InitializeVariables">
            <summary>
            Initializes all variables. Ugly.
            </summary>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.SetPositions">
            <summary>
            Sets positions. Called by invalidate to set new positions when window size or presented axis number changes.
            </summary>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.LoadTextures">
            <summary>
            Loads textures for the filter handles from tif files
            </summary>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.CreateAxisMaps">
            <summary>
            Creates the AxisMapList, creates all data axis, adds max- and minvalues
            </summary>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.CreateColorMap">
            <summary>
            Creates a Color Map from _maxColor and _minColor
            </summary>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.CreateLines">
            <summary>
            Creates a list of Vector2 arrays (the size is the number of data axes), to be used when drawing the lines
            </summary>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.SetMax(System.Int32,System.Single)">
            <summary>
            Sets axis max value.
            </summary>
            <param name="index">Index of the axis.</param>
            <param name="newMax">The new max value.</param>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.SetMin(System.Int32,System.Single)">
            <summary>
            Sets axis min value.
            </summary>
            <param name="index">Index of the axis.</param>
            <param name="newMin">The new min value.</param>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.RemoveMax(System.Int32)">
            <summary>
            This removes the user set max value. The component will use the calculated max instead.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.RemoveMin(System.Int32)">
            <summary>
            This removes the user set min value. The component will use the calculated min instead.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.FindClosestAxisToTheLeft(System.Single)">
            <summary>
            Finds the closest axis to the left given an x position. Extended Axis are treated as one.
            Returns the positional axis (i), not the value axis (_aI[i]).
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.FindClosestLineAxisToTheLeft(System.Int32)">
            <summary>
            returns the positional axis (i), not the value axis (_aI[i]) for the closest LINE axis (taking extended axis into account).
            </summary>
            <param name="xPos"></param>
            <returns></returns>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.GetLineIndexesAtPosition(System.Drawing.Point,System.Int32)">
            <summary>
            Gets the line indexes at a certain position.
            </summary>
            <param name="position">Position in render target coordinates.</param>
            <param name="pickSensitivity">The sensitivity</param>
            <returns>A list of indexes at the specified position.</returns>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.GetSelectedLineIndexes">
            <summary>
            Gets the selected lines in the component.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.SetSelectedHeaderIndexes(System.Collections.Generic.List{System.Int32})">
            <summary>
            Sets header indexes. Headers with index in the list will be selected.
            </summary>
            <param name="headerIndexes"></param>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.SetSelectedHeader(System.Int32)">
            <summary>
            Sets one header to be selected. The index corresponds to the column index in the input data.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.GetSelectedHeaderIndexes">
            <summary>
            Gets the selected header indexes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.SetSelectedLines(System.Collections.Generic.List{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Sets which lines should be selected. 
            </summary>
            <param name="selectedLinesIndexes"></param>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.mouseEventDown(System.Drawing.Point,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Activated when the user clicks. Sets information if axis and filters are clicked and calls picking if not.
            </summary>
            <param name="_mouseScreenPosition"></param>
            <param name="_multiSelect"></param>
            <param name="_multiRemove"></param>
            <param name="_rightClick"></param>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.FindAi(System.Int32)">
            <summary>
            Finds in which place in the _aI list a certain number is stored
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.mouseEventUp(System.Drawing.Point,System.Boolean,System.Boolean)">
            <summary>
            Called when the user stops clicking. If an axis is being moved, changes the number in the _aIList and calls invalidate
            </summary>
            <param name="_mouseScreenPosition"></param>
            <param name="_multiSelect"></param>
            <param name="_multiRemove"></param>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.mouseEventMove(System.Drawing.Point)">
            <summary>
            Called when the mouse moves. If there is an upper filter or axis active, either called SetVisibility and redraws the lines or draws a temporary shadow axis, respectively
            </summary>
            <param name="_mouseScreenPosition"></param>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.SetVisibility">
            <summary>
            Sets the visibility of the axis depending on where the filter is
            </summary>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.GetHeaderIndexAtLocation(System.Drawing.Point)">
            <summary>
            Gets the header index at a specific location.
            </summary>
            <param name="p">Location</param>
            <returns>Header index if the location is inside a header area, else -1.</returns>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.SetAllAxesExtended">
            <summary>
            Sets all axes to to be extended.
            </summary>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.InternalRender(Microsoft.DirectX.Direct3D.Device)">
            <summary>
            Calls init, creates color map and tranformation matrix and finally all render methods.
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.GetAxisXPositions">
            <summary>
            Gets the axis x-positions.
            </summary>
            <returns>List of positions.</returns>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.AddText(System.String,Gav.Graphics.ParallelCoordinatesPlot.TextRelativePosition,System.Drawing.Color,System.Drawing.Font,System.Single)">
            <summary>
            Adds a text to show inside the PC. 
            </summary>
            <param name="text">The text to show.</param>
            <param name="alignment">Sets the alignment of the text.</param>
            <param name="color">The text color.</param>
            <param name="font">The font used.</param>
            <param name="verticalPosition">The vertical position inside the pc from 0 to 1.</param>
        </member>
        <member name="M:Gav.Graphics.ParallelCoordinatesPlot.RemoveText(System.Int32)">
            <summary>
            Remove extra text with passed index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="E:Gav.Graphics.ParallelCoordinatesPlot.Picked">
            <summary>
            Occurs when the picking is done inside the component. A list containing the picked glyphs indexes is stored in the IndexesPickedEventArgs.
            </summary>
        </member>
        <member name="P:Gav.Graphics.ParallelCoordinatesPlot.OutfilteredLineColor">
            <summary>
            Gets or sets the color on outfiltered lines.
            </summary>
        </member>
        <member name="P:Gav.Graphics.ParallelCoordinatesPlot.FontHeaders">
            <summary>
            Gets or sets the font used for the headers. Needs an invalidate to update.
            </summary>
        </member>
        <member name="P:Gav.Graphics.ParallelCoordinatesPlot.FontSelectedHeaders">
            <summary>
            Gets or sets the font used for the selected headers. Needs an invalidate to update.
            </summary>
        </member>
        <member name="P:Gav.Graphics.ParallelCoordinatesPlot.FontMaxMinValues">
            <summary>
            Gets or sets the font used for the max min values. Needs an invalidate to update.
            </summary>
        </member>
        <member name="E:Gav.Graphics.ParallelCoordinatesPlot.FilterChanged">
            <summary>
            Occurs when a filter has changed.
            </summary>
        </member>
        <member name="E:Gav.Graphics.ParallelCoordinatesPlot.HeaderClicked">
            <summary>
            Occurs when a header is clicked.
            </summary>
        </member>
        <member name="E:Gav.Graphics.ParallelCoordinatesPlot.AxisExtendedStateChanged">
            <summary>
            Occurs when an axis changes extended state.
            </summary>
        </member>
        <member name="P:Gav.Graphics.ParallelCoordinatesPlot.IndexVisibilityHandler">
            <summary>
            Set or get the IndexVisibilityHandler used in the PC component. An IndexVisibilityHandler is created by default.
            </summary>
        </member>
        <member name="P:Gav.Graphics.ParallelCoordinatesPlot.Input">
            <summary>
            Set or get the input.
            </summary>
        </member>
        <member name="P:Gav.Graphics.ParallelCoordinatesPlot.ColorMap">
            <summary>
            Set or get the ColorMap used for coloring the lines.
            </summary>
        </member>
        <member name="P:Gav.Graphics.ParallelCoordinatesPlot.Headers">
            <summary>
            Set the headers used for the text above each axis.
            </summary>
        </member>
        <member name="P:Gav.Graphics.ParallelCoordinatesPlot.SelectedHeaderTextColor">
            <summary>
            Gets or sets the selected header text color.
            </summary>
        </member>
        <member name="P:Gav.Graphics.ParallelCoordinatesPlot.HeaderTextColor">
            <summary>
            Gets or sets the header text color.
            </summary>
        </member>
        <member name="P:Gav.Graphics.ParallelCoordinatesPlot.LineTransparency">
            <summary>
            Sets the transparency of the lines. 
            </summary>
        </member>
        <member name="P:Gav.Graphics.ParallelCoordinatesPlot.LineTransparencySelected">
            <summary>
            Sets the transparency for the lines that are selected.
            </summary>
        </member>
        <member name="P:Gav.Graphics.ParallelCoordinatesPlot.SelectedLineColor">
            <summary>
            Sets the color of the selected lines.
            </summary>
        </member>
        <member name="P:Gav.Graphics.ParallelCoordinatesPlot.AxisColor">
            <summary>
            Sets the color of the axis.
            </summary>
        </member>
        <member name="P:Gav.Graphics.ParallelCoordinatesPlot.TextColor">
            <summary>
            Sets the color of the text.
            </summary>
        </member>
        <member name="P:Gav.Graphics.ParallelCoordinatesPlot.AxisThickness">
            <summary>
            Sets the line width of the axes in pixels.
            </summary>
        </member>
        <member name="P:Gav.Graphics.ParallelCoordinatesPlot.AxisShadowThickness">
            <summary>
            Sets the line width of the "shadow axis" (the axis that is shown when dragging an axis) in pixels.
            </summary>
        </member>
        <member name="P:Gav.Graphics.ParallelCoordinatesPlot.LineThickness">
            <summary>
            Sets the line width of the lines in pixels.
            </summary>
        </member>
        <member name="P:Gav.Graphics.ParallelCoordinatesPlot.SelectedLineThickness">
            <summary>
            Sets the line width of the seleted lines in pixels.
            </summary>
        </member>
        <member name="P:Gav.Graphics.ParallelCoordinatesPlot.ShowOutFilteredLines">
            <summary>
            Sets whether to show out filtered lines or not. 
            </summary>
        </member>
        <member name="P:Gav.Graphics.ParallelCoordinatesPlot.GuideLineEnabled">
            <summary>
            Set whether or not to draw a horizontal guideline inside the component. 
            </summary>
        </member>
        <member name="P:Gav.Graphics.ParallelCoordinatesPlot.PaddingBottom">
            <summary>
            Sets or gets the bottom padding of the component. Text lies outside the padding.
            </summary>
        </member>
        <member name="P:Gav.Graphics.ParallelCoordinatesPlot.PaddingTop">
            <summary>
            Sets or gets the top padding of the component. Text lies outside the padding.
            </summary>
        </member>
        <member name="P:Gav.Graphics.ParallelCoordinatesPlot.PaddingLeft">
            <summary>
            Sets or gets the left padding of the component. Text lies outside the padding.
            </summary>
        </member>
        <member name="P:Gav.Graphics.ParallelCoordinatesPlot.PaddingRight">
            <summary>
            Sets or gets the right padding of the component. Text lies outside the padding.
            </summary>
        </member>
        <member name="P:Gav.Graphics.ParallelCoordinatesPlot.PickSensitivity">
            <summary>
            Sets or gets the pick sensitivity in pixels used when picking lines. 
            </summary>
        </member>
        <member name="P:Gav.Graphics.ParallelCoordinatesPlot.ClickedHeader">
            <summary>
            The last header to be clicked. 
            </summary>
        </member>
        <member name="T:Gav.Graphics.MapPolygonLayer">
            <summary>
            This class handles the rendering of the areas in the assigned MapData object. 
            </summary>
        </member>
        <member name="M:Gav.Graphics.MapPolygonLayer.SetSelectedPolygonIndexes(System.Collections.Generic.List{System.Int32})">
            <summary>
            Sets which polygons that are selected. The polygons will be colored with the SelectedPolygonColor.
            </summary>
            <param name="selectedPolygonIndexes">List of polygon indexes.</param>
        </member>
        <member name="P:Gav.Graphics.MapPolygonLayer.SelectedPolygonColor">
            <summary>
            Gets or sets the color of selected polygons. To set which polygons that are selectet use the SetSelectedPolygonIndexes method.
            </summary>
        </member>
        <member name="P:Gav.Graphics.MapPolygonLayer.PolygonColor">
            <summary>
            Gets or sets the color to fill the areas with. This property is not used when a ColorMap is assigned to the layer. 
            </summary>
        </member>
        <member name="P:Gav.Graphics.MapPolygonLayer.ColorMap">
            <summary>
            Gets or sets the assigned ColorMap. The areas will retrieve their colors based on their respective index. 
            </summary>
        </member>
        <member name="T:Gav.Data.MapData">
            <summary>
            GAV storage of data needed to build a map.
            </summary>
        </member>
        <member name="P:Gav.Data.MapData.RegionIds">
            <summary>
            Gets or sets the list of region IDs. One ID per defined region. 
            </summary>
        </member>
        <member name="T:Gav.Data.IndexVisibilityList">
            <summary>
            The IndexVisibiliyList holds the visibility a number of indexes. Max number of columns assigned to one list is 32. This because the visibility for one index is stored in one Int32. Each bit in that Int32 holds the visibility for one column.
            </summary>
        </member>
        <member name="M:Gav.Data.IndexVisibilityList.#ctor(System.Int32)">
            <summary>
            Creates a new IndexVisibilityList.
            </summary>
            <param name="size">Max number of index visibilities to store.</param>
        </member>
        <member name="M:Gav.Data.IndexVisibilityList.SetVisibility(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the visibility for e specified index on a specified "column".
            </summary>
            <param name="index">The index that the visibility will be set on.</param>
            <param name="column">Column</param>
            <param name="visible">True or false.</param>
        </member>
        <member name="M:Gav.Data.IndexVisibilityList.Clear">
            <summary>
            Clear the visibility list (all visibilities are set to visible).
            </summary>
        </member>
        <member name="M:Gav.Data.IndexVisibilityList.GetVisibility(System.Int32)">
            <summary>
            Get the visibility for a specified index.
            </summary>
            <param name="index">Index</param>
            <returns>The visibility (true for visible and false for not visible.</returns>
        </member>
        <member name="M:Gav.Data.IndexVisibilityList.CommitChanges">
            <summary>
            This method must be called in order for changes to take effect. 
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Gav.Graphics.ScatterPlot3D" -->
        <member name="M:Gav.Graphics.ScatterPlot3D.IsPointIntersectingXAxis(System.Drawing.Point)">
            <summary>
            Checks if the point intersects the x-axis.
            </summary>
            <param name="p">Location in render target coordinates.</param>
            <returns>True if the point intersects the axis, else false.</returns>
        </member>
        <member name="M:Gav.Graphics.ScatterPlot3D.IsPointIntersectingYAxis(System.Drawing.Point)">
            <summary>
            Checks if the point intersects the y-axis.
            </summary>
            <param name="p">Location in render target coordinates.</param>
            <returns>True if the point intersects the axis, else false.</returns>
        </member>
        <member name="M:Gav.Graphics.ScatterPlot3D.IsPointIntersectingZAxis(System.Drawing.Point)">
            <summary>
            Checks if the point intersects the z-axis.
            </summary>
            <param name="p">Location in render target coordinates.</param>
            <returns>True if the point intersects the axis, else false.</returns>
        </member>
        <member name="P:Gav.Graphics.ScatterPlot3D.RotationAndTranslationEnabled">
            <summary>
            Gets or sets whether the component will rotate or translate from mouse input.
            </summary>
        </member>
        <member name="P:Gav.Graphics.ScatterPlot3D.LightEnabled">
            <summary>
            Gets or sets if to use light. 
            </summary>
        </member>
        <member name="P:Gav.Graphics.VizSubComponent.Enabled">
            <summary>
            Set or get if the component should be rendered or not. 
            </summary>
        </member>
        <member name="T:Gav.Graphics.CenterGlyphPositioner">
            <summary>
            This class provides positions from the set MapData object. The position in centered in the area with index passed. 
            </summary>
        </member>
        <member name="M:Gav.Graphics.CenterGlyphPositioner.GetPosition(System.Int32)">
            <summary>
            Returns the position in center of the area with passed index.
            </summary>
            <param name="index">Area index</param>
            <returns>Centered position.</returns>
        </member>
        <member name="T:Gav.Graphics.GlyphScaler">
            <summary>
            Performs area dependent scaling. 
            </summary>
        </member>
        <member name="M:Gav.Graphics.GlyphScaler.GetScale(System.Int32)">
            <summary>
            Gets the scale calculated according to the passed area index. 
            </summary>
            <param name="index">Area index</param>
            <returns>The scale</returns>
        </member>
        <member name="P:Gav.Graphics.GlyphScaler.MapData">
            <summary>
            Gets or sets the MapData object. 
            </summary>
        </member>
        <member name="T:Gav.Data.AxisMap">
            <summary>
            This class contains functionality to map, in this case normalize, the values in a DataCube column. Which column to map is set by the Index property. The max value in the mapped column will be normalized to 1 and the min value to 0.
            </summary>
        </member>
        <member name="M:Gav.Data.AxisMap.DoMapping">
            <summary>
            Performs the mapping.
            </summary>
        </member>
        <member name="M:Gav.Data.AxisMap.DoMapping(System.Single,System.Single)">
            <summary>
            Performs the mapping between the user specified max and min values.
            </summary>
            <param name="maxValue">Max value</param>
            <param name="minValue">Min value</param>
        </member>
        <member name="M:Gav.Data.AxisMap.CalculateMaxMin(System.Single@,System.Single@)">
            <summary>
            Calculates the max and min value of the input data. (On the column that has been set in the Index property)
            </summary>
            <param name="max"></param>
            <param name="min"></param>
        </member>
        <member name="P:Gav.Data.AxisMap.Changed">
            <summary>
            Gets if the AxisMap has changed since the last call to the DoMapping method.
            </summary>
        </member>
        <member name="P:Gav.Data.AxisMap.Input">
            <summary>
            Gets or sets the input to the AxisMap. 
            </summary>
        </member>
        <member name="P:Gav.Data.AxisMap.MaxValue">
            <summary>
            Gets the max value of the input in the column with assigned index (Index property).
            </summary>
        </member>
        <member name="P:Gav.Data.AxisMap.MinValue">
            <summary>
            Gets the min value of the input in the column with assigned index (Index property).
            </summary>
        </member>
        <member name="P:Gav.Data.AxisMap.Index">
            <summary>
            Gets or sets which column index to map. 
            </summary>
        </member>
        <member name="P:Gav.Data.AxisMap.MappedValues">
            <summary>
            Gets the mapped values. (The DoMapping method needs to be called. If not, this property will return null)
            </summary>
        </member>
        <member name="T:Gav.Graphics.IDeviceFactory">
            <summary>
            Interface used in the Renderer class. If you want to handle the setup of the Microsoft.DirectX.Direct3D device yourself, inherit this class and pass it as an argument to the Renderer constructor.
            </summary>
        </member>
        <member name="T:Gav.Graphics.ChoroplethMap">
            <summary>
            This class handles the overall functionality to handle the rendering of a choropleth map. The map is built up by one or more MapLayer objects. 
            </summary>
        </member>
        <member name="M:Gav.Graphics.ChoroplethMap.ConvertScreenCoordinatesToMapCoordinates(System.Drawing.Point)">
            <summary>
            Converts the passed screen coordinate Point to map coordinates. The Point should be represent the position on the render surface.
            </summary>
            <param name="p">Point</param>
            <returns>Position in map coordinates.</returns>
        </member>
        <member name="M:Gav.Graphics.ChoroplethMap.AddLayer(Gav.Graphics.MapLayer)">
            <summary>
            Adds a layer to the map.
            </summary>
            <param name="layer">Layer to be added.</param>
        </member>
        <member name="E:Gav.Graphics.ChoroplethMap.ZoomInternallyChanged">
            <summary>
            Occurs when the zoom is changed from inside the component. The event is not triggered when the Zoom property is changed.
            </summary>
        </member>
        <member name="E:Gav.Graphics.ChoroplethMap.PositionInternallyChanged">
            <summary>
            Occurs when the position is changed from inside the component. The event is not triggered when the Position property is changed.
            </summary>
        </member>
        <member name="P:Gav.Graphics.ChoroplethMap.GlobalGlyphPositioner">
            <summary>
            Gets or sets the GlyphPositioner used by the GlyphMapLayer objects in the MapLayer collection. 
            </summary>
        </member>
        <member name="P:Gav.Graphics.ChoroplethMap.GlobalGlyphScaler">
            <summary>
            Gets or sets the GlyphScaler used by the GlyphMapLayer objects in the MapLayer collection. 
            </summary>
        </member>
        <member name="P:Gav.Graphics.ChoroplethMap.GlyphLodHandler">
            <summary>
            Gets or sets the level of detail handler for the layers. 
            </summary>
        </member>
        <member name="P:Gav.Graphics.ChoroplethMap.Zoom">
            <summary>
            Gets or sets map zoom.
            </summary>
        </member>
        <member name="P:Gav.Graphics.ChoroplethMap.Position">
            <summary>
            Gets or sets the map position.
            </summary>
        </member>
        <member name="T:Gav.Graphics.InteractiveColorLegend">
            <summary>
            An InteractiveColorLegend is a color legend that can be static, just showing the colors of the ColorMapPartCollection, or interactive with three different kind of sliders.
            Thresholding sliders at the upper and/or lower part of the legend.
            Color edge sliders to interact with the LinearColorMaps of the ColorMapPartCollection, interactively changing the proportions of the colormaps.
            Value sliders that gets a value at the position of the slider, not thresholding or changing the colormaps.
            </summary>
        </member>
        <member name="M:Gav.Graphics.InteractiveColorLegend.#ctor">
            <summary>
            Creates an InteractiveColorLegend object.
            </summary>
        </member>
        <member name="M:Gav.Graphics.InteractiveColorLegend.GetValuesFromValueSliders">
            <summary>
            Gets the current values of the ValueSliders.
            </summary>
            <returns>Returns a list with normalized values (0 - 1).</returns>
        </member>
        <member name="M:Gav.Graphics.InteractiveColorLegend.SetValueSliderValues(System.Collections.Generic.List{System.Single})">
            <summary>
            Sets the values of the ValueSliders.
            </summary>
            <param name="values">List containing the new values as normalized values (0 - 1). The size of values has to be the same as the number of ValueSliders used.</param>
        </member>
        <member name="M:Gav.Graphics.InteractiveColorLegend.GetUpperThresholdValue">
            <summary>
            Get the value of the upper threshold.
            </summary>
            <returns>The normalized value (0 - 1) as a float.</returns>
        </member>
        <member name="M:Gav.Graphics.InteractiveColorLegend.GetLowerThresholdValue">
            <summary>
            Get the value of the lower threshold.
            </summary>
            <returns>The normalized value (0 - 1) as a float.</returns>
        </member>
        <member name="M:Gav.Graphics.InteractiveColorLegend.SetUpperThresholdValue(System.Single)">
            <summary>
            Sets the value of the upper threshold. Only usable when using an upper threshold.
            </summary>
            <param name="value">The normalized value of the upper threshold (0 - 1).</param>
        </member>
        <member name="M:Gav.Graphics.InteractiveColorLegend.SetLowerThresholdValue(System.Single)">
            <summary>
            Sets the value of the lower threshold. Only usable when using an lower threshold.
            </summary>
            <param name="value">The normalized value of the lower threshold (0 - 1).</param>
        </member>
        <member name="M:Gav.Graphics.InteractiveColorLegend.SetLowerThreshold(Gav.Graphics.InteractiveColorLegend.SliderLinePosition,Gav.Graphics.InteractiveColorLegend.TextPosition,System.Boolean)">
            <summary>
            Sets the lower threshold slider to use.
            </summary>
            <param name="sliderPos">The position of the slider line.</param>
            <param name="textPos">The position of the slider text.</param>
            <param name="showTextValue">If the text value of the slider (the threshold value) is to be drawn.</param>
        </member>
        <member name="M:Gav.Graphics.InteractiveColorLegend.SetUpperThreshold(Gav.Graphics.InteractiveColorLegend.SliderLinePosition,Gav.Graphics.InteractiveColorLegend.TextPosition,System.Boolean)">
            <summary>
            Sets the upper threshold slider to use.
            </summary>
            <param name="sliderPos">The position of the slider line.</param>
            <param name="textPos">The position of the slider text.</param>
            <param name="showTextValue">If the text value of the slider (the threshold value) is to be drawn.</param>
        </member>
        <member name="M:Gav.Graphics.InteractiveColorLegend.SetValueSlider(System.Collections.Generic.List{System.Single},Gav.Graphics.InteractiveColorLegend.SliderLinePosition,Gav.Graphics.InteractiveColorLegend.TextPosition,System.Boolean)">
            <summary>
            Sets the ValueSliders to use. A ValueSlider is a non thresholding slider connected to the value of the position of the slider.
            </summary>
            <param name="positions">List of the positions of the sliders in percent of the legend height.</param>
            <param name="sliderPos">The position of the slider line.</param>
            <param name="textPos">The position of the slider text.</param>
            <param name="showTextValues">If the text value of the slider is to be drawn.</param>
        </member>
        <member name="M:Gav.Graphics.InteractiveColorLegend.SetEdgeSliders(Gav.Graphics.InteractiveColorLegend.SliderLinePosition,Gav.Graphics.InteractiveColorLegend.TextPosition,System.Boolean)">
            <summary>
            Sets the ColorEdgeSliders to use. A ColorEdgeSlider is a slider connected to the ColorMapPartCollection, one slider for each edge between two LinearColorMaps in the ColorMapPartCollection of the legend.
            </summary>
            <param name="sliderPos">The position of the slider line.</param>
            <param name="textPos">The position of the slider text.</param>
            <param name="showTextValues">If the text value of the slider is to be drawn.</param>
        </member>
        <member name="M:Gav.Graphics.InteractiveColorLegend.SetLegendSize(System.Single,System.Single)">
            <summary>
            Sets the size of the legend in percent of the size of the container holding the legend or in pixels.
            </summary>
            <param name="x">Width in pixels or in percent (0 - 1) of the width of the container.</param>
            <param name="y">Height in pixels or in percent (0 - 1) of the height of the container.</param>
        </member>
        <member name="M:Gav.Graphics.InteractiveColorLegend.SetPosition(System.Single,System.Single)">
            <summary>
            Sets the position of the legend i percent (0 - 1) of the size of the container holding the legend.
            </summary>
            <param name="x">X-position in pixels or in percent (0 - 1) of the width of the container.</param>
            <param name="y">Y-position in pixels or in percent (0 - 1) of the height of the container.</param>
        </member>
        <member name="M:Gav.Graphics.InteractiveColorLegend.SetFont(System.String,System.Single,System.Drawing.Color,System.Drawing.FontStyle)">
            <summary>
            Set the font to use when drawing slider values.
            </summary>
            <param name="font">Name of the font to use (such as "arial").</param>
            <param name="size">Size of the font.</param>
            <param name="textColor">Color of the font.</param>
            <param name="style">FontStyle to use.</param>
        </member>
        <member name="M:Gav.Graphics.InteractiveColorLegend.SetHeader(System.String,System.Single,System.Drawing.Color,System.Drawing.FontStyle,System.String)">
            <summary>
            Set the header and header font to use when drawing the header.
            </summary>
            <param name="font">Name of the font to use (such as "arial").</param>
            <param name="size">Size of the font.</param>
            <param name="textColor">Color of the font.</param>
            <param name="style">FontStyle to use.</param>
            <param name="headerText">The header text.</param>
        </member>
        <member name="M:Gav.Graphics.InteractiveColorLegend.SetHeader(System.String)">
            <summary>
            Set the header text to use.
            </summary>
            <param name="headerText">The header text.</param>
        </member>
        <member name="M:Gav.Graphics.InteractiveColorLegend.UpdateSize">
            <summary>
            Run when the size of the container is changed.
            </summary>
        </member>
        <member name="M:Gav.Graphics.InteractiveColorLegend.InternalInit(Microsoft.DirectX.Direct3D.Device)">
            <summary>
            Initiate the component.
            </summary>
            <param name="device">A Microsoft.DirectX.Direct3D.Device</param>
        </member>
        <member name="M:Gav.Graphics.InteractiveColorLegend.InternalInvalidate">
            <summary>
            Invalidate the component when changes has been made to it.
            </summary>
        </member>
        <member name="M:Gav.Graphics.InteractiveColorLegend.InternalRender(Microsoft.DirectX.Direct3D.Device)">
            <summary>
            Render the component.
            </summary>
            <param name="device">A Microsoft.DirectX.Direct3D.Device</param>
        </member>
        <member name="E:Gav.Graphics.InteractiveColorLegend.ThresholdValuesChanged">
            <summary>
            EventHandler connected to thresholding events in the legend (runs whenever a Thresholdslider is moved). Only usable when using threshold sliders.
            </summary>
        </member>
        <member name="E:Gav.Graphics.InteractiveColorLegend.ColorEdgeValuesChanged">
            <summary>
            EventHandler connected to ColorEdgeSlider events in the legend (runs whenever a ColorEdgelSider is moved). Only usable when using ColorEdgeSliders.
            </summary>
        </member>
        <member name="E:Gav.Graphics.InteractiveColorLegend.ValueSliderValuesChanged">
            <summary>
            EventHandler connected to ValueSlider events in the legend (runs whenever a ValueSlider i moved). Only usable when using ValueSliders.
            </summary>
        </member>
        <member name="P:Gav.Graphics.InteractiveColorLegend.BorderColor">
            <summary>
            Set or get the color of the legend border.
            </summary>
        </member>
        <member name="P:Gav.Graphics.InteractiveColorLegend.ColorMap">
            <summary>
            Set or get the ColorMapPartCollection to use in the legend.
            </summary>
        </member>
        <member name="P:Gav.Graphics.InteractiveColorLegend.HeaderColor">
            <summary>
            Set or get the color of the header text.
            </summary>
        </member>
        <member name="P:Gav.Graphics.InteractiveColorLegend.MinTextPosition">
            <summary>
            Set or get the text position of the minimum text value positioned at the bottom of the slider.
            </summary>
        </member>
        <member name="P:Gav.Graphics.InteractiveColorLegend.MaxTextPosition">
            <summary>
            Set or get the text position of the maximum text value positioned at the top of the slider.
            </summary>
        </member>
        <member name="P:Gav.Graphics.InteractiveColorLegend.Orientation">
            <summary>
            Set or get the orientation of the legend.
            </summary>
        </member>
        <member name="P:Gav.Graphics.InteractiveColorLegend.ShowLowerThresholdSlider">
            <summary>
            Set or get whether or not to show the lower threshold slider.
            </summary>
        </member>
        <member name="P:Gav.Graphics.InteractiveColorLegend.ShowLowerThresholdValue">
            <summary>
            Set or get whether or not to show the values of the lower threshold slider.
            </summary>
        </member>
        <member name="P:Gav.Graphics.InteractiveColorLegend.ShowMinimumValue">
            <summary>
            Set or get whether or not to show the minimum value next to the slider.
            </summary>
        </member>
        <member name="P:Gav.Graphics.InteractiveColorLegend.ShowMaximumValue">
            <summary>
            Set or get whether or not to show the maximum value next to the slider.
            </summary>
        </member>
        <member name="P:Gav.Graphics.InteractiveColorLegend.ShowMinMaxValues">
            <summary>
            Set whether or not to show the minimum and maximum values next to the slider.
            </summary>
        </member>
        <member name="P:Gav.Graphics.InteractiveColorLegend.ShowUpperThresholdSlider">
            <summary>
            Set or get whether or not to show the upper threshold slider.
            </summary>
        </member>
        <member name="P:Gav.Graphics.InteractiveColorLegend.ShowUpperThresholdValue">
            <summary>
            Set or get whether or not to show the values of the upper threshold slider.
            </summary>
        </member>
        <member name="P:Gav.Graphics.InteractiveColorLegend.ShowColorEdgeSliders">
            <summary>
            Set or get whether or not to show the color edge sliders.
            </summary>
        </member>
        <member name="P:Gav.Graphics.InteractiveColorLegend.ShowColorEdgeSliderValue">
            <summary>
            Set or get whether or not to show the values of the color edge slider.
            </summary>
        </member>
        <member name="P:Gav.Graphics.InteractiveColorLegend.ShowValueSliders">
            <summary>
            Set or get whether or not to show the value sliders.
            </summary>
        </member>
        <member name="P:Gav.Graphics.InteractiveColorLegend.ShowValueSliderValue">
            <summary>
            Set or get whether or not to show the values of the value slider.
            </summary>
        </member>
        <member name="P:Gav.Graphics.InteractiveColorLegend.SliderColor">
            <summary>
            Set or get the color of the sliders.
            </summary>
        </member>
        <member name="P:Gav.Graphics.InteractiveColorLegend.UseIndexVisibilityHandler">
            <summary>
            Set or get whether or not to use an IndexVisibilityHandler when thresholding
            </summary>
        </member>
        <member name="P:Gav.Graphics.InteractiveColorLegend.UseRelativeSize">
            <summary>
            Sets whether or not to have a size that changes with the size of the container.
            </summary>
        </member>
        <member name="P:Gav.Graphics.InteractiveColorLegend.UseRelativePosition">
            <summary>
            Sets whether or not to have a position that changes with the size of the container.
            </summary>
        </member>
        <member name="P:Gav.Graphics.InteractiveColorLegend.SliderTextColor">
            <summary>
            Set or get the color of the text showing values next to sliders.
            </summary>
        </member>
        <member name="P:Gav.Graphics.InteractiveColorLegend.MinMaxTextColor">
            <summary>
            Set or get the color of the text showing static minimum and maximum values.
            </summary>
        </member>
        <member name="P:Gav.Graphics.InteractiveColorLegend.VisibilityHandler">
            <summary>
            Sets or gets the IndexVisibilityHandler
            </summary>
        </member>
        <member name="T:Gav.Graphics.InteractiveColorLegend.LegendOrientation">
            <summary>
            The orientation of the color legend.
            </summary>
        </member>
        <member name="F:Gav.Graphics.InteractiveColorLegend.LegendOrientation.Horizontal">
            <summary>
            Horizontal orientation, the legend lies down.
            </summary>
        </member>
        <member name="F:Gav.Graphics.InteractiveColorLegend.LegendOrientation.Vertical">
            <summary>
            Vertical orientation, the legend stands up.
            </summary>
        </member>
        <member name="T:Gav.Graphics.InteractiveColorLegend.SliderLinePosition">
            <summary>
            The position of the slider line.
            </summary>
        </member>
        <member name="F:Gav.Graphics.InteractiveColorLegend.SliderLinePosition.RightOrBottom">
            <summary>
            The slider line stretch out on the right side of the legend.
            </summary>
        </member>
        <member name="F:Gav.Graphics.InteractiveColorLegend.SliderLinePosition.LeftOrTop">
            <summary>
            The slider line stretch out on the left side of the legend.
            </summary>
        </member>
        <member name="F:Gav.Graphics.InteractiveColorLegend.SliderLinePosition.Center">
            <summary>
            The slider line is positioned in the center of the legend.
            </summary>
        </member>
        <member name="T:Gav.Graphics.InteractiveColorLegend.TextPosition">
            <summary>
            The position of the slider text.
            </summary>
        </member>
        <member name="F:Gav.Graphics.InteractiveColorLegend.TextPosition.RightOrBottom">
            <summary>
            Position the text to the right of the slider.
            </summary>
        </member>
        <member name="F:Gav.Graphics.InteractiveColorLegend.TextPosition.LeftOrTop">
            <summary>
            Position the text to the left of the slider.
            </summary>
        </member>
        <member name="T:Gav.Data.SimpleColorMapPart">
            <summary>
            SimpleColorMapPart class.
            </summary>
        </member>
        <member name="T:Gav.Data.IColorMapPart">
            <summary>
            Interface for IColorMapPart
            </summary>
        </member>
        <member name="M:Gav.Data.SimpleColorMapPart.#ctor(System.Drawing.Color)">
            <summary>
            Creates a SimpleColorMapPart with the specified color.
            </summary>
            <param name="color">The color</param>
        </member>
        <member name="M:Gav.Data.SimpleColorMapPart.GetColor(System.Single)">
            <summary>
            The value doesn't matter. The GetColor will always return the same color.
            </summary>
            <param name="value">Not used</param>
            <returns>The Color passed in the constructor when created.</returns>
        </member>
        <member name="M:Gav.Data.SimpleColorMapPart.Invalidate">
            <summary>
            Invalidates the SimpleColorMapPart
            </summary>
        </member>
        <member name="T:Gav.Data.DataCube">
            <summary>
            This class stores a three-dimensional float array with some helper methods. Most of the functionality in GAV only supports a DataCube with z = 1, meaning that the depth of the cube is 1. In GAV parts of the cube are often refered to as rows and columns. Row with index i are the following values in the cube array, data[*,i ,0]. Column with index j are the following values int the cube array, data[j,*,0].
            </summary>
        </member>
        <member name="M:Gav.Data.DataCube.CalculateMD5Sum">
            <summary>
            Calculate the MD5 sum of the data contained in the DataCube.
            </summary>
            <returns>Returns the MD5 sum as a string.</returns>
        </member>
        <member name="M:Gav.Data.DataCube.GetAxisLength(Gav.Data.Axis)">
            <summary>
            Get the length of the axis.
            </summary>
            <param name="axis"></param>
            <returns>Returns the length of the axis.</returns>
        </member>
        <member name="M:Gav.Data.DataCube.SetData(System.Single[0:,0:])">
            <summary>
            SetData sets the passed float data.
            </summary>
            <param name="data">The float array to be inserted in the cube.</param>
        </member>
        <member name="M:Gav.Data.DataCube.SetData(System.Object[0:,0:])">
            <summary>
            The object array to be inserted into the cube. It will be parsed to float.
            If an object[i,j].ToString() cannot be parsed to float the position [i, j, 0]
            in the cube will be set to float.NaN.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Gav.Data.DataCube.SetData(System.Object[0:,0:,0:])">
            <summary>
            The object array to be inserted into the cube. It will be parsed to float.
            If an object[i,j,k].ToString() cannot be parsed to float the position [i, j, k]
            in the cube will be set to float.NaN.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Gav.Data.DataCube.GetColumnMaxMin(System.Int32,System.Single@,System.Single@)">
            <summary>
            Gets the max and min value of a column in the cube. A column is defined along the x-axis of the cube.
            </summary>
            <param name="columnIndex">The column to get max and min from.</param>
            <param name="max">When the method returns, max will contain the max value in the column with index columnIndex</param>
            <param name="min">When the method returns, min will contain the min value in the column with index columnIndex</param>
        </member>
        <member name="M:Gav.Data.DataCube.GetAllColumnMaxMin(System.Collections.Generic.List{System.Single}@,System.Collections.Generic.List{System.Single}@)">
            <summary>
            Get the max min values for every column (on the x axis). This only works for a two dimensional cube (z-axis size  equals 1)
            </summary>
            <param name="maxList">When this method returns, contains the max values for each column.</param>
            <param name="minList">When this method returns, contains the min values for each column.</param>
        </member>
        <member name="M:Gav.Data.DataCube.GetData">
            <summary>
            Returns the current object. This method is here to make it possible to use a DataCube object as an IDataCubeProvider. If a DataCube is created the following statement is always true. (dataCube == dataCube.GetData()).
            </summary>
            <returns></returns>
        </member>
        <member name="P:Gav.Data.DataCube.Data">
            <summary>
            Get or set the data array in the DataCube.
            </summary>
        </member>
        <member name="E:Gav.Data.DataCube.Changed">
            <summary>
            This event handler will not trigger any events from this class.
            </summary>
        </member>
        <member name="T:Gav.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Gav.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Gav.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Gav.Graphics.Renderer">
            <summary>
            The Renderer handles when, where and how a VizComponent should be rendered. 
            </summary>
        </member>
        <member name="M:Gav.Graphics.Renderer.#ctor(System.Windows.Forms.Form)">
            <summary>
            Constructor
            </summary>
            <param name="form">The top form where all the renderings are performed.</param>
        </member>
        <member name="M:Gav.Graphics.Renderer.Add(Gav.Graphics.VizComponent,System.Windows.Forms.Control)">
            <summary>
            Add a component to render on a specified control.
            </summary>
            <param name="component">Component to be rendered</param>
            <param name="renderTarget">The control to render on</param>
        </member>
        <member name="M:Gav.Graphics.Renderer.EnableAll">
            <summary>
            Enable all VizComponents for rendering on their respective render targets. 
            </summary>
        </member>
        <member name="M:Gav.Graphics.Renderer.GetVizComponent(System.Windows.Forms.Control)">
            <summary>
            Retrieves the VizComponent associated with the Control.
            </summary>
            <param name="renderTarget">Control the VizComponent is rendered on.</param>
        </member>
        <member name="M:Gav.Graphics.Renderer.GetRenderTarget(Gav.Graphics.VizComponent)">
            <summary>
            Retrieves the Control associated with the VizComponent.
            </summary>
            <param name="renderTarget">VizComponent which is rendered on the Control.</param>
        </member>
        <member name="M:Gav.Graphics.Renderer.DisableAll">
            <summary>
            Disables all rendering.
            </summary>
        </member>
        <member name="M:Gav.Graphics.Renderer.InvalidateAll">
            <summary>
            Invalidates all added VizComponents.
            </summary>
        </member>
        <member name="M:Gav.Graphics.Renderer.RenderAll">
            <summary>
            Renders all VizComponent's added.
            </summary>
        </member>
        <member name="M:Gav.Graphics.Renderer.Remove(Gav.Graphics.VizComponent)">
            <summary>
            Removes a VizComponent and its associated Control from the Renderer.
            </summary>
            <param name="vizComponent">VizComponent to remove.</param>
        </member>
        <member name="M:Gav.Graphics.Renderer.ContainsRenderTarget(System.Windows.Forms.Control)">
            <summary>
            Removes a Control and its associated VizComponent from the Renderer.
            </summary>
            <param name="renderTarget"></param>
            <returns></returns>
        </member>
        <member name="M:Gav.Graphics.Renderer.ContainsVizComponent(Gav.Graphics.VizComponent)">
            <summary>
            Returns true if Renderer contains the VizComponent.
            </summary>
            <param name="component">VizComponent to check for.</param>
            <returns>True if the Renderer contains the VizComponent component, else false.</returns>
        </member>
        <member name="P:Gav.Graphics.Renderer.RenderDuringResize">
            <summary>
            Gets or sets if the components should render during resize of the form. 
            </summary>
        </member>
        <member name="T:Gav.Graphics.MouseHoverController">
            <summary>
            MouseHoverControllers purpose is to send events when the mouse is hovering over a Control.
            </summary>
        </member>
        <member name="M:Gav.Graphics.MouseHoverController.#ctor(System.Windows.Forms.Control,System.Int32,System.Int32)">
            <summary>
            Creates a new MouseHoverController.
            </summary>
            <param name="control">Control on which to look for hover.</param>
            <param name="sensitivity">The distance the mouse has to move before hovering ends.</param>
            <param name="waitBeforeHover">The time in milliseconds the mouse has to be still before hovering starts.</param>
        </member>
        <member name="E:Gav.Graphics.MouseHoverController.Hover">
            <summary>
            Occurs when the mouse hovers over a Control. 
            </summary>
        </member>
        <member name="E:Gav.Graphics.MouseHoverController.HoverEnd">
            <summary>
            Occurs when the hovering ends.
            </summary>
        </member>
        <member name="P:Gav.Graphics.MouseHoverController.HoverPosition">
            <summary>
            Gets the position where the hovering takes place. 
            </summary>
        </member>
        <member name="P:Gav.Graphics.MouseHoverController.HoverScreenPosition">
            <summary>
            Gets the position where the hovering takes place. (In screen coordinates)
            </summary>
        </member>
        <member name="M:Gav.Graphics.GavToolTip.#ctor(System.Windows.Forms.Control)">
            <summary>
            Creates a new ToolTip.
            </summary>
            <param name="owner">The owner control.</param>
        </member>
        <member name="M:Gav.Graphics.GavToolTip.Show(System.Drawing.Point)">
            <summary>
            Shows the tool tip at the specified position.
            </summary>
            <param name="location">Position.</param>
        </member>
        <member name="M:Gav.Graphics.GavToolTip.Hide">
            <summary>
            Hides the tool tip.
            </summary>
        </member>
        <member name="P:Gav.Graphics.GavToolTip.FadeTime">
            <summary>
            Gets or sets the time it takes for the tool tip to fade in.
            </summary>
        </member>
        <member name="P:Gav.Graphics.GavToolTip.FadeEnable">
            <summary>
            Gets or sets if the tool tip should fade.
            </summary>
        </member>
        <member name="P:Gav.Graphics.GavToolTip.Text">
            <summary>
            Gets or sets the text shown in the tool tip.
            </summary>
        </member>
        <member name="P:Gav.Graphics.GavToolTip.BackColor">
            <summary>
            Gets or sets the tool tip background color.
            </summary>
        </member>
        <member name="P:Gav.Graphics.GavToolTip.Size">
            <summary>
            Gets or sets the size of the tool tip.
            </summary>
        </member>
        <member name="T:Gav.Data.IndexVisibilityHandler">
            <summary>
            IndexVisibilityHandler stores a collection of VisibilityLists. When a visibility is calculated for a specific index, the visibility for that index is combined from all the visibility lists. 
            </summary>
        </member>
        <member name="M:Gav.Data.IndexVisibilityHandler.#ctor(System.Int32)">
            <summary>
            Creates a new instance of IndexVisibilityHandler
            </summary>
            <param name="indexCount">Max number of index visibilities to store.</param>
        </member>
        <member name="M:Gav.Data.IndexVisibilityHandler.GetVisibility(System.Int32)">
            <summary>
            Gets visibility for a specific index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Gav.Data.IndexVisibilityHandler.CreateVisibilityList">
            <summary>
            Creates and returns a new IndexVisibilityList. The list is also added to the internal collection. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gav.Data.IndexVisibilityHandler.Clear">
            <summary>
            Clears the visibilities (all indexes is set to visible).
            </summary>
        </member>
        <member name="T:Gav.Data.IndexesPickedEventArgs">
            <summary>
            Provides data for the Picked event.
            </summary>
        </member>
        <member name="F:Gav.Data.IndexesPickedEventArgs.PickedIndexes">
            <summary>
            List of picked indexes.
            </summary>
        </member>
        <member name="T:Gav.Graphics.MapGlyphLayer">
            <summary>
            This class handles the rendering of a glyphs.
            </summary>
        </member>
        <member name="P:Gav.Graphics.MapGlyphLayer.ActiveGlyphScaler">
            <summary>
            Sets or gets the GlyphScaler assigned to this layer. The glyphs in the layer are scaled with the scale provided by the GlyphScaler.
            </summary>
        </member>
        <member name="P:Gav.Graphics.MapGlyphLayer.ActiveGlyphPositioner">
            <summary>
            Sets or gets the GlyphPositioner assigned to this layer. The glyphs in the layer are positioned at the position provided by the GlyphPositioner.
            </summary>
        </member>
        <member name="T:Gav.Data.IColorMap">
            <summary>
            Interface for IColorMap
            </summary>
        </member>
        <member name="T:Gav.Data.LinearColorMapPart">
            <summary>
            LinearColorMapPart interpolates colors between the MaxColor and MinColor.
            </summary>
        </member>
        <member name="M:Gav.Data.LinearColorMapPart.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Creates a new LinearColorMapPart.
            </summary>
            <param name="minColor">Min color.</param>
            <param name="maxColor">Max color.</param>
        </member>
        <member name="M:Gav.Data.LinearColorMapPart.Invalidate">
            <summary>
            Invalidates the LinearColorMapPart.
            </summary>
        </member>
        <member name="M:Gav.Data.LinearColorMapPart.GetColor(System.Single)">
            <summary>
            Returns the color for a specific value. This value must be between 0 and 1. 
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Gav.Data.StringIndexMapper">
            <summary>
            Creates a lookup table for string based indexes.
            </summary>
        </member>
        <member name="M:Gav.Data.StringIndexMapper.Reset(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Resets the component.
            </summary>
            <param name="mainList">Main list</param>
            <param name="listToMap">List to be mapped</param>
        </member>
        <member name="M:Gav.Data.StringIndexMapper.#ctor(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Creates a new StringIndexMapper.
            </summary>
            <param name="mainList">Main list</param>
            <param name="listToMap">List to map</param>
        </member>
        <member name="M:Gav.Data.StringIndexMapper.TryBackwardMapIndex(System.Int32,System.Int32@)">
            <summary>
            Gets the string in the listToMap at the passed index position. If the string exists in the mainList, the index in that list is returned. If the string doesn't exist int the mainList, mappedIndex will be set to -1.
            </summary>
            <param name="index">Index in the listToMap</param>
            <param name="mappedIndex">When this method returns, contains the mapped index. (The corresponding index in the mainList)</param>
            <returns>True if the index is found in the mainList, else false.</returns>
        </member>
        <member name="M:Gav.Data.StringIndexMapper.TryMapIndex(System.Int32,System.Int32@)">
            <summary>
            Gets the string in the mainList at the passed index position. If the string exists in the listToMap, the index in that list is returned. If the string doesn't exist int the listToMap, mappedIndex will be set to -1.
            </summary>
            <param name="index">Index in the mainList</param>
            <param name="mappedIndex">When this method returns, contains the mapped index. (The corresponding index in the listToMap)</param>
            <returns>True if the index is found in the listToMap, else false.</returns>
        </member>
        <member name="T:Gav.Data.ColorMap">
            <summary>
            The ColorMap is in charge of calculating colors between the max and min values. 
            The max and min values is by default calculated from the input data in the column 
            set by the Index property. Each data item in the cube (one row, one index) will 
            get a color based on its value in the column set by the Index property. The ColorMap 
            needs one or more IColorMapPart(s) to calculate the values. 
            </summary>
        </member>
        <member name="M:Gav.Data.ColorMap.AddColorMapPart(Gav.Data.IColorMapPart)">
            <summary>
            Adds an IColorMapPart
            </summary>
            <param name="colorMap"></param>
        </member>
        <member name="M:Gav.Data.ColorMap.GetColorMapPart(System.Int32)">
            <summary>
            Gets a the IColorMapPart at the specified index.
            </summary>
            <param name="index">index</param>
            <returns>IColorMap</returns>
        </member>
        <member name="M:Gav.Data.ColorMap.SetEdgeValues(System.Collections.Generic.List{System.Single})">
            <summary>
            Sets where the edges between the added IColorMapParts should be placed. 
            </summary>
            <param name="edgeValues">List values between 0 and 1. Number of floats in the list should be (number of added IColorMapParts)-1.</param>
        </member>
        <member name="M:Gav.Data.ColorMap.SetEdgeValue(System.Int32,System.Single)">
            <summary>
            Sets the position in 0-1 of the edge between two added IColorMapParts.
            </summary>
            <param name="index">Index of the edge to position.</param>
            <param name="value">New position of the edge. This value has to be between 0 and 1.</param>
        </member>
        <member name="M:Gav.Data.ColorMap.GetEdgeValues">
            <summary>
            Returns the positions of the edges.
            </summary>
            <returns>An array of positions bewteen 0 and 1</returns>
        </member>
        <member name="M:Gav.Data.ColorMap.CalculateEdges">
            <summary>
            Automatic calculation of edges. For example, if two parts are added, this method will create one edge and place it at position 0.5.
            </summary>
        </member>
        <member name="M:Gav.Data.ColorMap.GetColors">
            <summary>
            Gets the index based colors. A color at position i in the array corresponds 
            to the color of row i in the input data. The length of the array is always 
            equal to the number of rows (elements) in the input data. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gav.Data.ColorMap.GetColor(System.Int32)">
            <summary>
            Returns the calculated color for the passed index. If you want the colors for every index in the input data, use GetColors() method to improve performance. 
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Gav.Data.ColorMap.GetColors(System.Int32)">
            <summary>
            Returns an color[] with the size of steps. This method does not care about indexes or input data. If the Input property is null this method will still work.
            </summary>
            <param name="steps"></param>
            <returns></returns>
        </member>
        <member name="M:Gav.Data.ColorMap.Invalidate">
            <summary>
            Invalidates the colormap and calculates the colors based on the input.
            </summary>
        </member>
        <member name="P:Gav.Data.ColorMap.NaNColor">
            <summary>
            Gets or sets which color to use for NaN values.
            </summary>
        </member>
        <member name="P:Gav.Data.ColorMap.Index">
            <summary>
            Gets or sets which index (column) in the input to calculate the colors from.
            </summary>
        </member>
        <member name="P:Gav.Data.ColorMap.Input">
            <summary>
            Gets or sets the input to the ColorMap.
            </summary>
        </member>
        <member name="P:Gav.Data.ColorMap.Max">
            <summary>
            Set or get the max value, if not using the max of the input data source
            </summary>
        </member>
        <member name="P:Gav.Data.ColorMap.Min">
            <summary>
            Set or get the min value, if not using the min of the input data source
            </summary>
        </member>
        <member name="P:Gav.Data.ColorMap.UseGlobalMaxMin">
            <summary>
            Sets or gets whether or not to use global max and min values, instead of using the max and min of the input data source
            </summary>
        </member>
        <member name="P:Gav.Data.ColorMap.NumberOfEdges">
            <summary>
            Gets the number of edges.
            </summary>
        </member>
        <member name="P:Gav.Data.ColorMap.NumberOfParts">
            <summary>
            Gets the number of parts.
            </summary>
        </member>
        <member name="T:Gav.Graphics.SimpleGlyphScaler">
            <summary>
            This class provides a simple scaling of glyphs. All glyphs will be scaled with the scale set in the Scale property.
            </summary>
        </member>
        <member name="M:Gav.Graphics.SimpleGlyphScaler.GetScale(System.Int32)">
            <summary>
            Returns the scale set in the Scale property. The passed index is not used. 
            </summary>
            <param name="index">GlyphIndex</param>
            <returns>Scale</returns>
        </member>
        <member name="P:Gav.Graphics.SimpleGlyphScaler.Scale">
            <summary>
            Gets or sets the scaling that should be performed on all glyphs.
            </summary>
        </member>
        <member name="T:Gav.Graphics.MapPolygonBorderLayer">
            <summary>
            This class handles the rendering of area borders provided by the assigned MapData object.
            </summary>
        </member>
        <member name="P:Gav.Graphics.MapPolygonBorderLayer.BorderColor">
            <summary>
            Gets or sets the color of the borders. 
            </summary>
        </member>
        <member name="T:Gav.Data.DbfFileHeader">
            <summary>
            Holds information for dbf header and records.
            </summary>
        </member>
        <member name="F:Gav.Data.DbfFileHeader.Dbf_id">
            <summary>
            type of dbf file.
            </summary>
        </member>
        <member name="F:Gav.Data.DbfFileHeader.Last_update_y">
            <summary>
            the year of the file last update, start from year 1900.
            </summary>
            
        </member>
        <member name="F:Gav.Data.DbfFileHeader.Last_update_m">
            <summary>
            the month of the file last update
            </summary>
        </member>
        <member name="F:Gav.Data.DbfFileHeader.Last_update_d">
            <summary>
            the date of the file last update
            </summary>
        </member>
        <member name="F:Gav.Data.DbfFileHeader.RecordCount">
            <summary>
            records count
            </summary>
        </member>
        <member name="F:Gav.Data.DbfFileHeader.Data_offset">
            <summary>
            start of dbf file actual record data, in bytes. 
            </summary>
        </member>
        <member name="F:Gav.Data.DbfFileHeader.Rec_size">
            <summary>
            data record size, in bytes
            </summary>
        </member>
        <member name="F:Gav.Data.DbfFileHeader.Hasmemo">
            <summary>
            true if this dbf has memo field
            </summary>
        </member>
        <member name="F:Gav.Data.DbfFileHeader.Filesize">
            <summary>
            length of the dbf file, in bytes - (position of the end of stream)
            </summary>
        </member>
    </members>
</doc>
